#!/usr/bin/env bash
# shellcheck disable=SC2164

GREEN='\033[0;32m';
YELLOW='\033[0;33m';
RED='\033[0;31m';
NC='\033[0m'

# Functions

unpushed=()

checkPath() {
  local path=$1
  cd "$path"
  status=$(git -c color.ui=always status)
  if ! (echo "$status" | grep -q 'nothing to commit, working tree clean'); then
    echo -e "$YELLOW------------------------------"
    pwd
    echo -e "------------------------------$NC\n"
    echo "$status"
    echo
  else
    echo -e "${GREEN}âœ“$NC clean: $(pwd | sed 's/\n//')"
    if [[ $(git remote -v) && $(git log @{u}..) ]]; then 
      echo -e "  ${YELLOW}! Has unpushed changes.$NC"
      unpushed+=("$path")
    fi
  fi
}

fail() {
    echo "$1"
    exit 1
}

containedIn () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# Main

## Configure exclusions

if [ -f ~/.vcs-exclusions ]; then
  source ~/.vcs-exclusions;
else
  except=(
    "laradock"
    "laravel"
  )
fi

## Check Dev dir

for dir in ~/Dev/*; do
  if [ ! -d "$dir" ]; then continue; fi
  if [ ! -d "$dir/.git" ]; then continue; fi
  cd "$dir";
  if (($(git remote -v | wc -l) == 0)); then continue; fi
  if containedIn "$(basename "$dir")" "${except[@]}"; then continue; fi

  checkPath "$dir"
done

## Check other dirs

checkPath ~/bin
[ -d ~/bin2 ] && checkPath ~/bin2

[ -d ~/.config/JetBrains ] && JETBRAINS_DIR=~/.config/JetBrains/ || JETBRAINS_DIR=~/Library/Application\ Support/JetBrains

if [ -d "$JETBRAINS_DIR" ]; then
  cd "$JETBRAINS_DIR" || fail "JetBrains config directory doesn't exist"
  stormDir=$(ls -1d PhpStorm* | tail -n 1)
  checkPath "$JETBRAINS_DIR/$stormDir/keymaps"
fi

## Auto-commit

kbPath=~/Documents/Knowledge\ base

if [ -d "$kbPath/.git" ]; then 
  cd "$kbPath" &&
    git add . &&
    git commit -m "auto-commited by shutdown checker" > /dev/null
    checkPath "$kbPath"
fi

## Push changes

stillUnpushed=()

if [[ ${#unpushed[@]} > 0 ]]; then
  echo
  echo "There's committed but unpushed changes in ${unpushed[@]}."
  read -p "Do you want to push them? (Y/n):" confirm
  if [[ ${confirm:0:1} != 'n' ]]; then
    for ((i = 0; i < ${#unpushed[@]}; i++)); do
      echo -e "${YELLOW}${unpushed[$i]}${NC}\n"
      cd "${unpushed[$i]}"
      git push
      if [ "$?" -eq 1 ]; then stillUnpushed+=("${unpushed[$i]}"); fi
    done
  fi
fi

## Ask to force-push changes

if [[ ${#stillUnpushed[@]} > 0 ]]; then
  echo
  echo "Pushes were rejected for ${stillUnpushed[@]}."
  read -p "Do you want to force-push them? (y/N):" confirm
  if [[ ${confirm:0:1} == 'y' ]]; then
    for ((i = 0; i < ${#stillUnpushed[@]}; i++)); do
      echo -e "${RED}${stillUnpushed[$i]}${NC}\n"
      cd "${stillUnpushed[$i]}"
      git push --force
    done
  else
    echo -e "${YELLOW}Unpushed changes left behind!${NC}"
  fi
fi

## Finish up

if [[ $(uname) == 'Darwin' ]]; then
  # On MacOS shutdown from CLI requires sudo, so let's skip this part here.
  exit
fi

echo
# shellcheck disable=SC2034
read -rp "$(date +%H:%M) Press RETURN" confirm

if [[ $1 == '-r' ]]; then
  reboot
else
  shutdown now
fi
