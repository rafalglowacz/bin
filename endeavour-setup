#!/usr/bin/env bash
# shellcheck disable=SC2015

##############
# Functions #
############

step-header() {
  echo -e '\n\e[93m\e[1m------------------------------'
  echo "$1"
  echo -e '------------------------------\e[0m'
}

fail() {
    echo "$1"
    exit 1
}

#########
# Init #
#######

set -e

if [ "$USER" = root ]; then
    # We need $USER to be our regular user, not root, so this script shouldn't be run with sudo.
    echo "Please run this script without sudo and as a regular user. Sudo will be added where necessary."
    exit 1
fi

##########################
# Configuration (early) #
########################

step-header "Dotfiles"

[ -d ~/dev ] || mkdir ~/dev

if [ ! -d ~/dev/dotfiles ]; then
    cd ~/dev &&
        git clone git@github.com:rafalglowacz/dotfiles.git ||
        fail "Dotfiles error"
fi

step-header "Symlinks (early)"

# Directory symlinks need to be deleted.
rm -rf ~/.config/atuin
rm -rf ~/.config/git
rm -rf ~/.config/helix
rm -rf ~/.config/ideavim
rm -rf ~/.config/kitty
rm -rf ~/.config/mpv
rm -rf ~/.config/nvim
rm -rf ~/.config/nvim-pager/nvim
rm -rf ~/.config/vim

mkdir -p ~/.config/Code\ -\ OSS/User
mkdir -p ~/.config/git
mkdir -p ~/.var/app/com.visualstudio.code/config/Code/User

true &&
    ln -sf ~/dev/dotfiles/atuin ~/.config/atuin &&
    ln -sf ~/dev/dotfiles/git/gitconfig.conf ~/.config/git/config &&
    ln -sf ~/dev/dotfiles/helix ~/.config/helix &&
    ln -sf ~/dev/dotfiles/vimlike/idea-vim ~/.config/ideavim &&
    ln -sf ~/dev/dotfiles/kitty ~/.config/kitty &&
    ln -sf ~/dev/dotfiles/mpv ~/.config/mpv &&
    ln -sf ~/dev/dotfiles/vimlike/nvim ~/.config/nvim &&
    ln -sf ~/dev/dotfiles/vimlike/nvim-pager ~/.config/nvim-pager/nvim &&
    ln -sf ~/dev/dotfiles/tmux/new.conf ~/.tmux.conf &&
    ln -sf ~/dev/dotfiles/vcs-exclusions ~/.vcs-exclusions &&
    ln -sf ~/dev/dotfiles/vimlike/vim ~/.config/vim &&
    ln -sf ~/dev/dotfiles/vscode/vscode-settings.json  ~/.config/Code\ -\ OSS/User/settings.json &&
    ln -sf ~/dev/dotfiles/vscode/vscode-shortcuts.json ~/.config/Code\ -\ OSS/User/keybindings.json &&
    ln -sf ~/dev/dotfiles/vscode/vscode-settings.json  ~/.var/app/com.visualstudio.code/config/Code/User/settings.json &&
    ln -sf ~/dev/dotfiles/vscode/vscode-shortcuts.json ~/.var/app/com.visualstudio.code/config/Code/User/keybindings.json ||
    fail "Symlinks error"

step-header "SSH"

if [ ! -f ~/.ssh/id_ed25519.pub ]; then
    # shellcheck disable=SC2034
    ssh-keygen -t ed25519 &&
        cat ~/.ssh/id_ed25519.pub &&
        read -rp "Press Enter after saving the SSH key to Github" confirm ||
        fail "SSH error"
fi

if [ ! -f ~/.ssh/config ]; then
    echo 'AddKeysToAgent yes' > ~/.ssh/config
fi

step-header "Global settings"

if ! $(timedatectl show --property=LocalRTC | grep -q yes); then
    sudo timedatectl set-local-rtc 1 ||
        fail "Settings error"
fi

if ! $(groups | grep -q vboxusers) || ! $(groups | grep -q docker); then
    sudo groupadd vboxusers || true
    sudo groupadd docker || true
    sudo usermod -aG docker,vboxusers "$USER" ||
        fail "Usermod error"
fi

yay --save --answerdiff All --answerclean None --noconfirm -Y

#########################
# Installation (early) #
#######################

step-header "Pacman packages (early)"

pkg=()
pkg+=( flatpak )
pkg+=( keepassxc )
pkg+=( kitty )
pkg+=( nextcloud-client )

sudo pacman -S --needed --noconfirm ${pkg[*]} || fail "Pacman installation (early) error"

step-header "Flatpak packages (early)"

pkg=()
pkg+=( org.freefilesync.FreeFileSync )
sudo flatpak install -y flathub ${pkg[*]} || fail "Flatpak installation (early) error"

#################
# Installation #
###############

step-header "Pacman packages"

pkg=()
pkg+=( atuin )
pkg+=( audacity )
pkg+=( baobab )
pkg+=( base-devel )
pkg+=( bat )
pkg+=( btop )
pkg+=( calibre )
pkg+=( certbot )
pkg+=( composer )
pkg+=( curl )
pkg+=( dbeaver )
pkg+=( docker )
pkg+=( docker-compose )
pkg+=( eos-update-notifier )
pkg+=( eza )
pkg+=( fd )
pkg+=( freecad )
pkg+=( freerdp )
pkg+=( fx )
pkg+=( gimp )
pkg+=( git-delta )
pkg+=( gparted )
pkg+=( helix )
pkg+=( htop )
pkg+=( hunspell-en_us )
pkg+=( hunspell-pl )
pkg+=( inkscape )
pkg+=( iotop )
pkg+=( jq )
pkg+=( jdk-openjdk )
pkg+=( kdeconnect )
pkg+=( kdenlive )
pkg+=( kfind )
pkg+=( kwalletmanager )
pkg+=( libreoffice-fresh )
pkg+=( libvncserver )
pkg+=( libxcrypt-compat )
pkg+=( ttf-lilex-nerd )
pkg+=( lldb )
pkg+=( lynx )
pkg+=( most )
pkg+=( meld )
pkg+=( ncdu )
pkg+=( neovim )
pkg+=( net-tools )
pkg+=( noto-fonts-emoji )
pkg+=( openshot )
pkg+=( partitionmanager )
pkg+=( php )
pkg+=( php-gd )
pkg+=( php-pgsql )
pkg+=( php-redis )
pkg+=( php-sodium )
pkg+=( php-xsl )
pkg+=( qbittorrent )
pkg+=( qmk )
pkg+=( qt5-imageformats )
pkg+=( redis )
pkg+=( remmina )
pkg+=( ripgrep )
pkg+=( rpi-imager )
pkg+=( rustup )
pkg+=( smplayer )
pkg+=( strawberry )
pkg+=( teensy_loader_cli )
pkg+=( thefuck )
pkg+=( ttc-iosevka )
pkg+=( ttf-fantasque-sans-mono )
pkg+=( ttf-monofur )
pkg+=( ttf-monofur-nerd )
pkg+=( ttf-nerd-fonts-symbols-mono )
pkg+=( thunderbird )
pkg+=( tmux )
pkg+=( tree )
pkg+=( virtualbox )
pkg+=( vlc )
pkg+=( wl-clipboard )
pkg+=( yay )
pkg+=( zsh )

sudo pacman -S --needed --noconfirm ${pkg[*]} || fail "Pacman installation error"

step-header "Pacman packages (theming)"

pkg=( cutefish-wallpapers )
pkg+=( deepin-wallpapers )
pkg+=( deepin-community-wallpapers )
pkg+=( elementary-wallpapers )
# pkg+=( endeavouros-theming )
pkg+=( ukui-wallpapers )

sudo pacman -S --needed --noconfirm ${pkg[*]} || fail "Theming packages error"

step-header "AUR packages"

aur=""
# aur="${aur} anki"
# aur="${aur} joplin-appimage"
# aur="${aur} mp3gain"
aur="${aur} php-amqp"
# aur="${aur} plover"

if [[ "$aur" != '' ]]; then
    yay -S --needed --noconfirm $aur || fail 'AUR installation error'
fi

step-header "Flatpak packages"

pkg=()
pkg+=( com.getpostman.Postman )
pkg+=( com.spotify.Client )
pkg+=( com.visualstudio.code )
pkg+=( cc.arduino.IDE2 )
pkg+=( io.github.ungoogled_software.ungoogled_chromium )
pkg+=( net.ankiweb.Anki )
pkg+=( net.cozic.joplin_desktop )
pkg+=( org.gnome.SimpleScan )
pkg+=( org.nickvision.tubeconverter )

sudo flatpak install -y flathub ${pkg[*]} || fail "Flatpak installation error"

step-header "Node"

if ! which fnm >> /dev/null; then
    curl -o /tmp/fnm-install https://raw.githubusercontent.com/Schniz/fnm/master/.ci/install.sh &&
        sh /tmp/fnm-install --skip-shell ||
        fail "FNM install error"
fi

if ! which node >> /dev/null; then
    export PATH="$HOME/.local/share/fnm:$PATH" &&
        eval "`fnm env`" &&
        fnm install --lts ||
        fail "Node install error"
fi

step-header "Bluetooth"

sudo systemctl enable bluetooth &&
    sudo systemctl start bluetooth ||
    fail "Bluetooth service error"

step-header 'Docker'

sudo systemctl enable docker ||
    fail "Docker service enabling error"

step-header "Endeavour extras"

# Remove wallpapers without sufficient resolution.
if [ ! -f ~/.local/state/wallpaper-cleanup ]; then
    sudo ~/bin/image-small-delete /usr/share/endeavouros/backgrounds >> ~/.local/state/wallpaper-cleanup
fi

step-header "Firewall"

sudo firewall-cmd -q --permanent --zone=public --add-service=kdeconnect ||
    fail "Firewall error"

step-header "FZF"

if [ ! -d ~/.fzf ]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf &&
        ~/.fzf/install --key-bindings --completion --update-rc ||
        fail 'FZF error'
fi

step-header "Keyboardio"

if [ ! -f /etc/udev/rules.d/60-kaleidoscope.rules ]; then
    sudo wget -O /etc/udev/rules.d/60-kaleidoscope.rules \
        https://raw.githubusercontent.com/keyboardio/Kaleidoscope/master/etc/60-kaleidoscope.rules
    sudo udevadm control --reload-rules && sudo udevadm trigger
fi

step-header "Git Trim"

if ! which git-trim >> /dev/null; then
    npm install -g git-trim ||
    fail "Git Trim installation error"
fi

step-header "Gnome"

if [[ $XDG_CURRENT_DESKTOP == 'GNOME' ]]; then
    if ! grep -q 'QT_QPA_PLATFORM=xcb' /etc/environment; then
        echo 'QT_QPA_PLATFORM=xcb' | sudo tee -a /etc/environment
    fi
    sudo pacman -S --needed --noconfirm gnome-browser-connector ||
        fail "Gnome error"
fi

step-header "KDE"

if [[ $XDG_CURRENT_DESKTOP == 'KDE' ]]; then
    sudo pacman -S --needed --noconfirm \
        kdeplasma-addons ||
        fail "KDE packages error"
fi

step-header "PHP"

sudo perl -i -pe 's/;(extension=amqp)/\1/' /etc/php/conf.d/amqp.ini &&
    sudo perl -i -pe 's/;(extension=exif)/\1/' /etc/php/php.ini &&
    sudo perl -i -pe 's/;(extension=gd)/\1/' /etc/php/php.ini &&
    sudo perl -i -pe 's/;(extension=igbinary)/\1/' /etc/php/conf.d/igbinary.ini &&
    sudo perl -i -pe 's/;(extension=iconv)/\1/' /etc/php/php.ini &&
    sudo perl -i -pe 's/;(extension=intl)/\1/' /etc/php/php.ini &&
    sudo perl -i -pe 's/;(extension=pdo_pgsql)/\1/' /etc/php/php.ini &&
    sudo perl -i -pe 's/;(extension=redis)/\1/' /etc/php/conf.d/redis.ini &&
    sudo perl -i -pe 's/;(extension=sodium)/\1/' /etc/php/php.ini &&
    sudo perl -i -pe 's/;(extension=soap)/\1/' /etc/php/php.ini &&
    sudo perl -i -pe 's/;(extension=xsl)/\1/' /etc/php/php.ini ||
    fail "PHP extension enabling error"

step-header "QMK"

sudo groupadd -f dialout &&
    sudo usermod -aG dialout $USER ||
    fail "Failed to add user to dialout group"

step-header "Rust"

rustup default stable

step-header "TLDR"

if ! which tldr >> /dev/null; then
    npm install -g tldr &&
    tldr -u ||
    fail "TLDR installation error"
fi

step-header "ZSH"

if [ ! -d ~/.oh-my-zsh ]; then
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended ||
    fail "OMZ error"
fi

if [[ "$SHELL" != '/usr/bin/zsh' ]]; then
    sudo chsh -s "$(which zsh)" "$USER" ||
        fail "Default shell change error"
fi

if [ ! -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions ||
    fail "ZSH autosuggestions error"
fi

if [ ! -d ~/.oh-my-zsh/custom/plugins/command-time ]; then
    git clone https://github.com/popstas/zsh-command-time.git ~/.oh-my-zsh/custom/plugins/command-time ||
        fail "ZSH command time error"
fi

if [ ! -d ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting \
            ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ||
        fail "ZSH syntax highlighting error"
fi

###############################
# Configuration, themes etc. #
#############################

step-header "Boot"

if [ -f /etc/default/grub ] && ! grep -q 'GRUB_TIMEOUT=1' /etc/default/grub; then
    sudo perl -i -pe 's/(GRUB_TIMEOUT)=./\1=1/' /etc/default/grub &&
        sudo update-grub ||
        fail "Grub error"
fi

if sudo sh -c '[ -f /efi/loader/loader.conf ]' && ! sudo grep -q 'timeout 0' /efi/loader/loader.conf; then
    sudo perl -i -pe 's/(timeout) ./\1 0/' /efi/loader/loader.conf ||
        fail "Systemd boot error"
fi

step-header "Symlinks"

ln -sf ~/dev/dotfiles/zsh/candy.zsh-theme ~/.oh-my-zsh/custom/themes/candy.zsh-theme &&
    ln -sf ~/dev/dotfiles/zsh/zshrc.zshrc ~/.zshrc ||
    fail "Symlinks error"

step-header "Update"

updateTimer=~/.config/systemd/user/eos-update-notifier.timer
if [ ! -f $updateTimer ]; then
    eos-update-notifier -init ||
        fail "Update init error"
fi
perl -i -pe 's/^(OnStartupSec)/# \1/' $updateTimer &&
    perl -i -pe 's/^(RandomizedDelaySec)/# \1/' $updateTimer &&
    perl -i -pe 's/^#?\s*(Persistent)=.*/\1=true/' $updateTimer &&
    perl -i -pe 's/^#?\s*(OnCalendar)=.*/\1=Weekly/' $updateTimer ||
    fail "Update config error"

echo -e '\n\e[32m\e[1m------------------------------'
echo "Done"
echo -e '------------------------------\e[0m'
